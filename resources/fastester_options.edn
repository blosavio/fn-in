{:project-formatted-name "fn-in"

 :responsible {:name "Brad Losavio"
               :email "blosavio@sagevisuals.com"}

 :copyright-holder "Brad Losavio"

 :fastester-UUID #uuid "8eee9b50-1572-45b3-b2a5-f8cf76c82289"

 :preferred-version-info :lein

 :benchmarks {'fn-in.performance.get-benchmarks
              #{#_'test-get-seq
                #_'test-get*-seq
                #_'test-get-vec
                #_'test-get*-vec
                #_'test-get-list
                #_'test-get*-list
                #_'test-get-map
                #_'test-get*-map}

              'fn-in.performance.get-in-benchmarks
              #{'test-get-in-vec
                'test-get-in*-vec
                'test-get-in*-seq
                'test-get-in*-list
                'test-get-in-map
                'test-get-in*-map

                'test-get-in-vec-2
                'test-get-in*-vec-2
                }}

 ;; output directories and filenames
 :html-directory "doc/"
 :html-filename "performance.html"
 :img-subdirectory "img/"

 :markdown-directory "doc/"
 :markdown-filename "performance.md-not"

 :results-url "https://github.com/blosavio/fn_in/blob/main/"
 :results-directory "resources/fn_in_performance/"

 :verbose? true
 :testing-thoroughness :quick
 :parallel? false
 :save-benchmark-fn-results? false

 :sort-comparator compare #_#(> (Integer/parseInt %1) (Integer/parseInt %2))

 :tidy-html? true

 :preamble [:div
            [:p "fn-in preamble"]]

 :comments
 {"Sequences"
  [:div
   [:p "Comments for sequences..."]]

  "Hashmaps"
  [:div
   [:p "Comments for hashmaps..."]]

  "Lists"
  [:div
   [:p "This is unfair to "
    [:code "get*"]
    ": "
    [:code "clojure.core/get"]
    " always returns "
    [:code "nil"]
    " when given a list, whereas "
    [:code "get*"]
    " actually retrieves the element."]]

  "Vectors"
  [:div
   [:p "Comments for vectors..."]]}


 :chart-settings
 {"(fn [n] (get (seq-of-n-rand-ints n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get* (seq-of-n-rand-ints n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get (vec-of-n-rand-ints n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get* (vec-of-n-rand-ints n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get (list-of-n-rand-ints n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get* (list-of-n-rand-ints n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get (map-of-n-key-vals n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get* (map-of-n-key-vals n) (dec n)))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get-in (nested-vec n) (take n (repeat (dec n)))))"
  {:x-axis-logarithmic? false
   :y-axis-logarithmic? false}

  "(fn [n] (get-in* (nested-vec n) (take n (repeat (dec n)))))"
  {:x-axis-logarithmic? false
   :y-axis-logarithmic? false}

  "(fn [n] (get-in* (nested-seq n) (take n (repeat (dec n)))))"
  {:x-axis-logarithmic? false
   :y-axis-logarithmic? false}

  "(fn [n] (get-in (narrow-deep-vec n) (concat (take n-levels (repeat n)) [(dec n)])))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}

  "(fn [n] (get-in* (narrow-deep-vec n) (concat (take n-levels (repeat n)) [(dec n)])))"
  {:x-axis-logarithmic? true
   :y-axis-logarithmic? false}
  }
 }

