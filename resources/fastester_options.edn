;; Compose a global options hashmap by gathering values from discretized
;; options hashmaps.


(let [base (load-file "resources/fastester_options_base.edn")
      opts-filenames ["get_options.edn"
                      "get_in_options.edn"
                      "assoc_options.edn"
                      "assoc_in_options.edn"
                      "update_options.edn"
                      "update_in_options.edn"
                      "dissoc_options.edn"
                      "dissoc_in_options.edn"]
      discrete-options (map #(load-file (str "resources/" %)) opts-filenames)
      benchmarks (reduce #(merge %1 (%2 :benchmarks)) {} discrete-options)
      chart-settings (reduce #(merge %1 (%2 :chart-settings)) {} discrete-options)]
  (-> base
      (assoc :title "fn-in library performance"
             :fastester-UUID #uuid "8eee9b50-1572-45b3-b2a5-f8cf76c82289"
             :html-filename "performance.html"
             :markdown-filename "performance.md"
             :results-directory "resources/fn_in_performance/"
             :preamble [:div [:p "fn-in preamble..."]]
             :comments {"Hashmaps" [:div [:p "Hashmaps..."]]
                        "Lists" [:div [:p "Lists..."]]
                        "Sequences" [:div [:p "Sequences..."]]
                        "Vectors" [:div [:p "Vectors..."]]}
             :benchmarks benchmarks
             :chart-settings chart-settings)))

