(->>
 {:title "dissoc-in* performance"

  :fastester-UUID #uuid "abd643c6-c697-4d28-b491-837e69bfa3e0"

  :benchmarks {'fn-in.performance.dissoc-in-benchmarks
               #{'test-dissoc-in*-list
                 'test-dissoc-in*-map
                 'test-dissoc-in*-seq
                 'test-dissoc-in*-vec
                 'test-dissoc-in*-vec-2}}

  :html-filename "dissoc_in_performance.html"
  :img-subdirectory "img_dissoc_in/"
  :markdown-filename "dissoc_in_performance.md"
  :results-directory "resources/fn_in_performance/dissoc_in/"

  :preamble [:div
             [:p [:code "dissoc-in*"]
              " version 5 handles nested hashmaps and some nested vectors
 notably faster than version_4, while maintaining the performance of sequences
 and lists."]

             [:p "See the "
              [:a {:href "https://blosavio.github.io/fn-in/performance_summary.html"} "overall summary"]
              " for benchmarking details. The benchmarks displayed in this
 document are defined "
              [:a {:href "https://github.com/blosavio/fn-in/blob/master/test/fn_in/performance/dissoc_in_benchmarks.clj"} "here"]
              "."]]

  :comments
  {"Sequences"
   [:div
    [:p "Version 5 performs about the same as version 4 when handling
 sequences."]]

   "Hashmaps"
   [:div
    [:p "Version 5 handles hashmaps twice as fast a version 4."]]

   "Lists"
   [:div
    [:p "Version 5 handles lists somewhat faster than version 4."]]

   "Vectors"
   [:div
    [:p "Version 5 handles some nested vectors with 24 to 40% speedup compared
 to version 4, while other patterns of nested vectors are handled similarly."]]}


  :chart-settings
  {"(fn [n] (dissoc-in* (nested-list n) (path-list n)))"
   {:x-axis-logarithmic? false
    :y-axis-logarithmic? false}

   "(fn [n] (dissoc-in* (nested-map n) (path-map n)))"
   {:x-axis-logarithmic? false
    :y-axis-logarithmic? false}

   "(fn [n] (dissoc-in* (nested-seq n) (path-seq n)))"
   {:x-axis-logarithmic? false
    :y-axis-logarithmic? false}

   "(fn [n] (dissoc-in* (narrow-deep-vec n) (path-narrow-deep-vec n)))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? true}

   "(fn [n] (dissoc-in* (nested-vec n) (path-nested-vec n)))"
   {:x-axis-logarithmic? false
    :y-axis-logarithmic? false}}}
 (merge (load-file "resources/fastester_options_base.edn")))

