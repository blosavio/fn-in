(->>
 {:title "assoc* performance"

  :fastester-UUID #uuid "950a5376-ea22-474d-a95e-cac23b4179bc"

  :benchmarks {'fn-in.performance.assoc-benchmarks
               #{'test-assoc*-list
                 'test-assoc*-map
                 'test-assoc*-seq
                 'test-assoc*-vec
                 'test-assoc-map
                 'test-assoc-vec}}

  :html-filename "assoc_performance.html"
  :img-subdirectory "img_assoc/"
  :markdown-filename "assoc_performance.md"
  :results-directory "resources/fn_in_performance/assoc/"

  :preamble [:div
             [:p [:code "assoc*"]
              " version 5 performance improved across the board, closing the gap
 with "
              [:code "clojure.core/get"]
              "."]

             [:p "See the "
              [:a {:href "https://blosavio.github.io/fn-in/performance_summary.html"} "overall summary"]
              " for benchmarking details. The benchmarks displayed in this
 document are defined "
              [:a {:href "https://github.com/blosavio/fn-in/blob/master/test/fn_in/performance/assoc_benchmarks.clj"} "here"]
              "."]]

  :comments
  {"Sequences"
   [:div
    [:p "Version 5 handles sequences 40% faster than version 4."]]

   "Hashmaps"
   [:div
    [:p "While version 5 of "
     [:code "assoc*"]
     " is 4 to 17% slower than "
     [:code "clojure.core/get"]
     " when handling hashmaps, it substantially closed the performance gap from
 version 4."]]

   "Lists"
   [:div
    [:p "Handling lists is indistinguishable between version 4 to version 5."]]

   "Vectors"
   [:div
    [:p "Version 5 performance improved noticeably, but still lags "
     [:code "clojure.core/assoc"]
     " by a factor of two."]]}


  :chart-settings
  {"(fn [n] (assoc (map-of-n-key-vals n) (dec n) :benchmark-sentinel))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? false}

   "(fn [n] (assoc* (map-of-n-key-vals n) (dec n) :benchmark-sentinel))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? false}

   "(fn [n] (assoc* (list-of-n-rand-ints n) (dec n) :benchmark-sentinel))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? true}

   "(fn [n] (assoc (seq-of-n-rand-ints n) (dec n) :benchmark-sentinel))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? false}

   "(fn [n] (assoc* (seq-of-n-rand-ints n) (dec n) :benchmark-sentinel))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? false}

   "(fn [n] (assoc (vec-of-n-rand-ints n) (dec n) :benchmark-sentinel))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? false}

   "(fn [n] (assoc* (vec-of-n-rand-ints n) (dec n) :benchmark-sentinel))"
   {:x-axis-logarithmic? true
    :y-axis-logarithmic? false}}}
 (merge (load-file "resources/fastester_options_base.edn")))

